import * as fs from "fs";

type PropertyType = "string" | "number" | "boolean" | string[];

type Properties = { [k: string]: PropertyType };

type Events = { [k: string]: string };

declare function __collectProperties<
  T extends { [k: string]: { className: any; props: any; events: any } }
>(): {
  [K in keyof T]: {
    className: string;
    props: Properties;
    events: Events;
  };
};

const { props: HTML_PROPS, events: HTML_EVENTS } = __collectProperties<{
  html: {
    className: HTMLElement;
    props: Omit<HTMLElement, keyof Node>;
    events: HTMLElement["addEventListener"];
  };
}>().html;

const ELEMENT_PROPS_MAP = __collectProperties<{
  [K in keyof HTMLElementTagNameMap]: {
    className: HTMLElementTagNameMap[K];
    props: Omit<HTMLElementTagNameMap[K], keyof HTMLElement>;
    events: HTMLElementTagNameMap[K]["addEventListener"];
  };
}>();

function toPasalCase(s: string): string {
  return `${s[0].toUpperCase()}${s.slice(1)}`;
}

class PresetCollector {
  private result = "";

  collect(): string {
    this.result = "// This file is @generated by web-types.\n";
    // Collect properties of HTMLElement.
    this.startInsertProp("+HTML");
    this.collectEvents(HTML_EVENTS);
    this.collectProps(HTML_PROPS);
    this.endInsertProp();

    // Collect properties of each Element.
    for (const [tag, { className, props, events }] of Object.entries(
      ELEMENT_PROPS_MAP
    )) {
      this.startInsertProp(`${tag} => ${className}`);
      this.insertProp(`+HTML`);
      this.collectEvents(events, HTML_EVENTS);
      this.collectProps(props, tag);
      this.endInsertProp();
    }
    return this.result;
  }

  private collectEvents(events: Events, exclude: Events = {}) {
    const sorted = Object.entries(events)
      .filter(([key]) => exclude[key] === undefined)
      .sort();
    for (const [key, val] of sorted) {
      if (key.startsWith("webkit")) {
        continue;
      }
      this.insertProp(`@${key}: ${val}`);
    }
  }

  private collectProps(props: Properties, tag?: string) {
    const litTypePrefix = tag ? toPasalCase(tag) : "";
    const sorted = Object.entries(props).sort();
    for (const [key, val] of sorted) {
      if (key.startsWith("webkit")) {
        continue;
      }
      let name = key;
      let type: string;
      if (typeof val == "string") {
        type = val;
      } else {
        type = this.literalProp(`${litTypePrefix}${toPasalCase(key)}`, val);
      }
      this.insertProp(`${name}: ${type}`);
    }
  }

  private literalProp(name: string, literals: string[]) {
    const values = literals.map((v) => `"${v}"`).join(" ");
    const result = `${name}(${values})`;
    return result;
  }

  private startInsertProp(head: string) {
    this.result += `${head} {`;
  }

  private insertProp(content: string) {
    this.result += `\n    ${content},`;
  }

  private endInsertProp() {
    this.result += `\n}\n`;
  }
}

const path = process.argv[2];
const preset = new PresetCollector().collect();
if (path === undefined) {
  console.log(preset);
} else {
  fs.writeFileSync(path, preset);
}
