// This file is @generated by web-types.
+HTML {
    accessKey: string,
    autocapitalize: string,
    dir: string,
    draggable: boolean,
    hidden: boolean,
    inert: boolean,
    innerText: string,
    lang: string,
    outerText: string,
    spellcheck: boolean,
    title: string,
    translate: boolean,
    className: string,
    id: string,
    @fullscreenchange: Event,
    @fullscreenerror: Event,
    outerHTML: string,
    scrollLeft: number,
    scrollTop: number,
    slot: string,
    ariaAtomic: string,
    ariaAutoComplete: string,
    ariaBusy: string,
    ariaChecked: string,
    ariaColCount: string,
    ariaColIndex: string,
    ariaColIndexText: string,
    ariaColSpan: string,
    ariaCurrent: string,
    ariaDisabled: string,
    ariaExpanded: string,
    ariaHasPopup: string,
    ariaHidden: string,
    ariaInvalid: string,
    ariaKeyShortcuts: string,
    ariaLabel: string,
    ariaLevel: string,
    ariaLive: string,
    ariaModal: string,
    ariaMultiLine: string,
    ariaMultiSelectable: string,
    ariaOrientation: string,
    ariaPlaceholder: string,
    ariaPosInSet: string,
    ariaPressed: string,
    ariaReadOnly: string,
    ariaRequired: string,
    ariaRoleDescription: string,
    ariaRowCount: string,
    ariaRowIndex: string,
    ariaRowIndexText: string,
    ariaRowSpan: string,
    ariaSelected: string,
    ariaSetSize: string,
    ariaSort: string,
    ariaValueMax: string,
    ariaValueMin: string,
    ariaValueNow: string,
    ariaValueText: string,
    role: string,
    innerHTML: string,
    @copy: ClipboardEvent,
    @cut: ClipboardEvent,
    @paste: ClipboardEvent,
    contentEditable: string,
    enterKeyHint: string,
    inputMode: string,
    @abort: UIEvent,
    @animationcancel: AnimationEvent,
    @animationend: AnimationEvent,
    @animationiteration: AnimationEvent,
    @animationstart: AnimationEvent,
    @auxclick: MouseEvent,
    @beforeinput: InputEvent,
    @blur: FocusEvent,
    @cancel: Event,
    @canplay: Event,
    @canplaythrough: Event,
    @change: Event,
    @click: MouseEvent,
    @close: Event,
    @contextmenu: MouseEvent,
    @cuechange: Event,
    @dblclick: MouseEvent,
    @drag: DragEvent,
    @dragend: DragEvent,
    @dragenter: DragEvent,
    @dragleave: DragEvent,
    @dragover: DragEvent,
    @dragstart: DragEvent,
    @drop: DragEvent,
    @durationchange: Event,
    @emptied: Event,
    @ended: Event,
    @focus: FocusEvent,
    @formdata: FormDataEvent,
    @gotpointercapture: PointerEvent,
    @input: Event,
    @invalid: Event,
    @keydown: KeyboardEvent,
    @keypress: KeyboardEvent,
    @keyup: KeyboardEvent,
    @load: Event,
    @loadeddata: Event,
    @loadedmetadata: Event,
    @loadstart: Event,
    @lostpointercapture: PointerEvent,
    @mousedown: MouseEvent,
    @mouseenter: MouseEvent,
    @mouseleave: MouseEvent,
    @mousemove: MouseEvent,
    @mouseout: MouseEvent,
    @mouseover: MouseEvent,
    @mouseup: MouseEvent,
    @pause: Event,
    @play: Event,
    @playing: Event,
    @pointercancel: PointerEvent,
    @pointerdown: PointerEvent,
    @pointerenter: PointerEvent,
    @pointerleave: PointerEvent,
    @pointermove: PointerEvent,
    @pointerout: PointerEvent,
    @pointerover: PointerEvent,
    @pointerup: PointerEvent,
    @progress: ProgressEvent,
    @ratechange: Event,
    @reset: Event,
    @resize: UIEvent,
    @scroll: Event,
    @securitypolicyviolation: SecurityPolicyViolationEvent,
    @seeked: Event,
    @seeking: Event,
    @select: Event,
    @selectionchange: Event,
    @selectstart: Event,
    @slotchange: Event,
    @stalled: Event,
    @submit: SubmitEvent,
    @suspend: Event,
    @timeupdate: Event,
    @toggle: Event,
    @touchcancel: TouchEvent,
    @touchend: TouchEvent,
    @touchmove: TouchEvent,
    @touchstart: TouchEvent,
    @transitioncancel: TransitionEvent,
    @transitionend: TransitionEvent,
    @transitionrun: TransitionEvent,
    @transitionstart: TransitionEvent,
    @volumechange: Event,
    @waiting: Event,
    @webkitanimationend: Event,
    @webkitanimationiteration: Event,
    @webkitanimationstart: Event,
    @webkittransitionend: Event,
    @wheel: WheelEvent,
    autofocus: boolean,
    nonce: string,
    tabIndex: number,
}
a => HTMLAnchorElement {
    +HTML,
    charset: string,
    coords: string,
    download: string,
    hreflang: string,
    name: string,
    ping: string,
    referrerPolicy: string,
    rel: string,
    rev: string,
    shape: string,
    target: string,
    text: string,
    type: string,
    hash: string,
    host: string,
    hostname: string,
    href: string,
    password: string,
    pathname: string,
    port: string,
    protocol: string,
    search: string,
    username: string,
}
abbr => HTMLElement {
    +HTML,
}
address => HTMLElement {
    +HTML,
}
area => HTMLAreaElement {
    +HTML,
    coords: string,
    download: string,
    ping: string,
    referrerPolicy: string,
    rel: string,
    shape: string,
    target: string,
    hash: string,
    host: string,
    hostname: string,
    href: string,
    password: string,
    pathname: string,
    port: string,
    protocol: string,
    search: string,
    username: string,
    alt: string,
    noHref: boolean,
}
article => HTMLElement {
    +HTML,
}
aside => HTMLElement {
    +HTML,
}
audio => HTMLAudioElement {
    +HTML,
    autoplay: boolean,
    controls: boolean,
    crossOrigin: string,
    currentTime: number,
    defaultMuted: boolean,
    defaultPlaybackRate: number,
    disableRemotePlayback: boolean,
    loop: boolean,
    muted: boolean,
    @encrypted: MediaEncryptedEvent,
    @waitingforkey: Event,
    playbackRate: number,
    preload: AudioPreload("" "none" "metadata" "auto"),
    preservesPitch: boolean,
    src: string,
    volume: number,
}
b => HTMLElement {
    +HTML,
}
base => HTMLBaseElement {
    +HTML,
    target: string,
    href: string,
}
bdi => HTMLElement {
    +HTML,
}
bdo => HTMLElement {
    +HTML,
}
blockquote => HTMLQuoteElement {
    +HTML,
    cite: string,
}
body => HTMLBodyElement {
    +HTML,
    link: string,
    text: string,
    aLink: string,
    background: string,
    bgColor: string,
    vLink: string,
    @afterprint: Event,
    @beforeprint: Event,
    @beforeunload: BeforeUnloadEvent,
    @gamepadconnected: GamepadEvent,
    @gamepaddisconnected: GamepadEvent,
    @hashchange: HashChangeEvent,
    @languagechange: Event,
    @message: MessageEvent,
    @messageerror: MessageEvent,
    @offline: Event,
    @online: Event,
    @pagehide: PageTransitionEvent,
    @pageshow: PageTransitionEvent,
    @popstate: PopStateEvent,
    @rejectionhandled: PromiseRejectionEvent,
    @storage: StorageEvent,
    @unhandledrejection: PromiseRejectionEvent,
    @unload: Event,
}
br => HTMLBRElement {
    +HTML,
    clear: string,
}
button => HTMLButtonElement {
    +HTML,
    name: string,
    type: string,
    disabled: boolean,
    formAction: string,
    formEnctype: string,
    formMethod: string,
    formNoValidate: boolean,
    formTarget: string,
    value: string,
}
canvas => HTMLCanvasElement {
    +HTML,
    height: number,
    width: number,
}
caption => HTMLTableCaptionElement {
    +HTML,
    align: string,
}
cite => HTMLElement {
    +HTML,
}
code => HTMLElement {
    +HTML,
}
col => HTMLTableColElement {
    +HTML,
    span: number,
    width: string,
    align: string,
    ch: string,
    chOff: string,
    vAlign: string,
}
colgroup => HTMLTableColElement {
    +HTML,
    span: number,
    width: string,
    align: string,
    ch: string,
    chOff: string,
    vAlign: string,
}
data => HTMLDataElement {
    +HTML,
    value: string,
}
datalist => HTMLDataListElement {
    +HTML,
}
dd => HTMLElement {
    +HTML,
}
del => HTMLModElement {
    +HTML,
    cite: string,
    dateTime: string,
}
details => HTMLDetailsElement {
    +HTML,
    open: boolean,
}
dfn => HTMLElement {
    +HTML,
}
dialog => HTMLDialogElement {
    +HTML,
    open: boolean,
    returnValue: string,
}
div => HTMLDivElement {
    +HTML,
    align: string,
}
dl => HTMLDListElement {
    +HTML,
    compact: boolean,
}
dt => HTMLElement {
    +HTML,
}
em => HTMLElement {
    +HTML,
}
embed => HTMLEmbedElement {
    +HTML,
    name: string,
    type: string,
    src: string,
    height: string,
    width: string,
    align: string,
}
fieldset => HTMLFieldSetElement {
    +HTML,
    name: string,
    disabled: boolean,
}
figcaption => HTMLElement {
    +HTML,
}
figure => HTMLElement {
    +HTML,
}
footer => HTMLElement {
    +HTML,
}
form => HTMLFormElement {
    +HTML,
}
h1 => HTMLHeadingElement {
    +HTML,
    align: string,
}
h2 => HTMLHeadingElement {
    +HTML,
    align: string,
}
h3 => HTMLHeadingElement {
    +HTML,
    align: string,
}
h4 => HTMLHeadingElement {
    +HTML,
    align: string,
}
h5 => HTMLHeadingElement {
    +HTML,
    align: string,
}
h6 => HTMLHeadingElement {
    +HTML,
    align: string,
}
head => HTMLHeadElement {
    +HTML,
}
header => HTMLElement {
    +HTML,
}
hgroup => HTMLElement {
    +HTML,
}
hr => HTMLHRElement {
    +HTML,
    width: string,
    align: string,
    color: string,
    noShade: boolean,
    size: string,
}
html => HTMLHtmlElement {
    +HTML,
    version: string,
}
i => HTMLElement {
    +HTML,
}
iframe => HTMLIFrameElement {
    +HTML,
    name: string,
    referrerPolicy: IframeReferrerPolicy("" "origin" "no-referrer" "no-referrer-when-downgrade" "origin-when-cross-origin" "same-origin" "strict-origin" "strict-origin-when-cross-origin" "unsafe-url"),
    src: string,
    height: string,
    width: string,
    align: string,
    allow: string,
    allowFullscreen: boolean,
    frameBorder: string,
    longDesc: string,
    marginHeight: string,
    marginWidth: string,
    scrolling: string,
    srcdoc: string,
}
img => HTMLImageElement {
    +HTML,
    name: string,
    referrerPolicy: string,
    alt: string,
    crossOrigin: string,
    src: string,
    height: number,
    width: number,
    align: string,
    longDesc: string,
    border: string,
    decoding: ImgDecoding("async" "auto" "sync"),
    hspace: number,
    isMap: boolean,
    loading: ImgLoading("eager" "lazy"),
    lowsrc: string,
    sizes: string,
    srcset: string,
    useMap: string,
    vspace: number,
}
input => HTMLInputElement {
    +HTML,
    name: string,
    type: string,
    alt: string,
    src: string,
    disabled: boolean,
    formAction: string,
    formEnctype: string,
    formMethod: string,
    formNoValidate: boolean,
    formTarget: string,
    value: string,
    height: number,
    width: number,
    align: string,
    autocomplete: string,
    size: number,
    useMap: string,
    accept: string,
    capture: string,
    checked: boolean,
    defaultChecked: boolean,
    defaultValue: string,
    dirName: string,
    indeterminate: boolean,
    max: string,
    maxLength: number,
    min: string,
    minLength: number,
    multiple: boolean,
    pattern: string,
    placeholder: string,
    readOnly: boolean,
    required: boolean,
    selectionDirection: InputSelectionDirection("none" "forward" "backward"),
    selectionEnd: number,
    selectionStart: number,
    step: string,
    valueAsNumber: number,
    webkitdirectory: boolean,
}
ins => HTMLModElement {
    +HTML,
    cite: string,
    dateTime: string,
}
kbd => HTMLElement {
    +HTML,
}
label => HTMLLabelElement {
    +HTML,
    htmlFor: string,
}
legend => HTMLLegendElement {
    +HTML,
    align: string,
}
li => HTMLLIElement {
    +HTML,
    type: string,
    value: number,
}
link => HTMLLinkElement {
    +HTML,
    charset: string,
    hreflang: string,
    referrerPolicy: string,
    rel: string,
    rev: string,
    target: string,
    type: string,
    href: string,
    crossOrigin: string,
    disabled: boolean,
    as: string,
    imageSizes: string,
    imageSrcset: string,
    integrity: string,
    media: string,
}
main => HTMLElement {
    +HTML,
}
map => HTMLMapElement {
    +HTML,
    name: string,
}
mark => HTMLElement {
    +HTML,
}
menu => HTMLMenuElement {
    +HTML,
    compact: boolean,
}
meta => HTMLMetaElement {
    +HTML,
    name: string,
    media: string,
    content: string,
    httpEquiv: string,
    scheme: string,
}
meter => HTMLMeterElement {
    +HTML,
    value: number,
    max: number,
    min: number,
    high: number,
    low: number,
    optimum: number,
}
nav => HTMLElement {
    +HTML,
}
noscript => HTMLElement {
    +HTML,
}
object => HTMLObjectElement {
    +HTML,
    code: string,
    data: string,
    name: string,
    type: string,
    height: string,
    width: string,
    align: string,
    border: string,
    hspace: number,
    useMap: string,
    vspace: number,
    archive: string,
    codeBase: string,
    codeType: string,
    declare: boolean,
    standby: string,
}
ol => HTMLOListElement {
    +HTML,
    type: string,
    compact: boolean,
    reversed: boolean,
    start: number,
}
optgroup => HTMLOptGroupElement {
    +HTML,
    label: string,
    disabled: boolean,
}
option => HTMLOptionElement {
    +HTML,
    label: string,
    text: string,
    disabled: boolean,
    value: string,
    defaultSelected: boolean,
    selected: boolean,
}
output => HTMLOutputElement {
    +HTML,
    name: string,
    value: string,
    defaultValue: string,
}
p => HTMLParagraphElement {
    +HTML,
    align: string,
}
picture => HTMLPictureElement {
    +HTML,
}
pre => HTMLPreElement {
    +HTML,
    width: number,
}
progress => HTMLProgressElement {
    +HTML,
    value: number,
    max: number,
}
q => HTMLQuoteElement {
    +HTML,
    cite: string,
}
rp => HTMLElement {
    +HTML,
}
rt => HTMLElement {
    +HTML,
}
ruby => HTMLElement {
    +HTML,
}
s => HTMLElement {
    +HTML,
}
samp => HTMLElement {
    +HTML,
}
script => HTMLScriptElement {
    +HTML,
    event: string,
    charset: string,
    referrerPolicy: string,
    text: string,
    type: string,
    crossOrigin: string,
    src: string,
    htmlFor: string,
    integrity: string,
    async: boolean,
    defer: boolean,
    noModule: boolean,
}
section => HTMLElement {
    +HTML,
}
select => HTMLSelectElement {
    +HTML,
    name: string,
    disabled: boolean,
    value: string,
    autocomplete: string,
    length: number,
    size: number,
    multiple: boolean,
    required: boolean,
    selectedIndex: number,
}
slot => HTMLSlotElement {
    +HTML,
    name: string,
}
small => HTMLElement {
    +HTML,
}
source => HTMLSourceElement {
    +HTML,
    type: string,
    src: string,
    height: number,
    width: number,
    sizes: string,
    srcset: string,
    media: string,
}
span => HTMLSpanElement {
    +HTML,
}
strong => HTMLElement {
    +HTML,
}
style => HTMLStyleElement {
    +HTML,
    type: string,
    disabled: boolean,
    media: string,
}
sub => HTMLElement {
    +HTML,
}
summary => HTMLElement {
    +HTML,
}
sup => HTMLElement {
    +HTML,
}
table => HTMLTableElement {
    +HTML,
    summary: string,
    bgColor: string,
    width: string,
    align: string,
    border: string,
    cellPadding: string,
    cellSpacing: string,
    frame: string,
    rules: string,
}
tbody => HTMLTableSectionElement {
    +HTML,
    align: string,
    ch: string,
    chOff: string,
    vAlign: string,
}
td => HTMLTableCellElement {
    +HTML,
    abbr: string,
    bgColor: string,
    height: string,
    width: string,
    align: string,
    ch: string,
    chOff: string,
    vAlign: string,
    axis: string,
    colSpan: number,
    headers: string,
    noWrap: boolean,
    rowSpan: number,
    scope: string,
}
template => HTMLTemplateElement {
    +HTML,
}
textarea => HTMLTextAreaElement {
    +HTML,
    name: string,
    disabled: boolean,
    value: string,
    autocomplete: string,
    defaultValue: string,
    dirName: string,
    maxLength: number,
    minLength: number,
    placeholder: string,
    readOnly: boolean,
    required: boolean,
    selectionDirection: TextareaSelectionDirection("none" "forward" "backward"),
    selectionEnd: number,
    selectionStart: number,
    rows: number,
    cols: number,
    wrap: string,
}
tfoot => HTMLTableSectionElement {
    +HTML,
    align: string,
    ch: string,
    chOff: string,
    vAlign: string,
}
th => HTMLTableCellElement {
    +HTML,
    abbr: string,
    bgColor: string,
    height: string,
    width: string,
    align: string,
    ch: string,
    chOff: string,
    vAlign: string,
    axis: string,
    colSpan: number,
    headers: string,
    noWrap: boolean,
    rowSpan: number,
    scope: string,
}
thead => HTMLTableSectionElement {
    +HTML,
    align: string,
    ch: string,
    chOff: string,
    vAlign: string,
}
time => HTMLTimeElement {
    +HTML,
    dateTime: string,
}
title => HTMLTitleElement {
    +HTML,
    text: string,
}
tr => HTMLTableRowElement {
    +HTML,
    bgColor: string,
    align: string,
    ch: string,
    chOff: string,
    vAlign: string,
}
track => HTMLTrackElement {
    +HTML,
    label: string,
    src: string,
    default: boolean,
    kind: string,
    srclang: string,
}
u => HTMLElement {
    +HTML,
}
ul => HTMLUListElement {
    +HTML,
    type: string,
    compact: boolean,
}
var => HTMLElement {
    +HTML,
}
video => HTMLVideoElement {
    +HTML,
    autoplay: boolean,
    controls: boolean,
    crossOrigin: string,
    currentTime: number,
    defaultMuted: boolean,
    defaultPlaybackRate: number,
    disableRemotePlayback: boolean,
    loop: boolean,
    muted: boolean,
    @encrypted: MediaEncryptedEvent,
    @waitingforkey: Event,
    playbackRate: number,
    preload: VideoPreload("" "none" "metadata" "auto"),
    preservesPitch: boolean,
    src: string,
    volume: number,
    height: number,
    width: number,
    disablePictureInPicture: boolean,
    @enterpictureinpicture: Event,
    @leavepictureinpicture: Event,
    playsInline: boolean,
    poster: string,
}
wbr => HTMLElement {
    +HTML,
}
