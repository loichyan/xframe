// This file is @generated by web-types.
+EVENT {
    @abort: UIEvent,
    @animationcancel: AnimationEvent,
    @animationend: AnimationEvent,
    @animationiteration: AnimationEvent,
    @animationstart: AnimationEvent,
    @auxclick: MouseEvent,
    @beforeinput: InputEvent,
    @blur: FocusEvent,
    @cancel: Event,
    @canplay: Event,
    @canplaythrough: Event,
    @change: Event,
    @click: MouseEvent,
    @close: Event,
    @compositionend: CompositionEvent,
    @compositionstart: CompositionEvent,
    @compositionupdate: CompositionEvent,
    @contextmenu: MouseEvent,
    @copy: ClipboardEvent,
    @cuechange: Event,
    @cut: ClipboardEvent,
    @dblclick: MouseEvent,
    @drag: DragEvent,
    @dragend: DragEvent,
    @dragenter: DragEvent,
    @dragleave: DragEvent,
    @dragover: DragEvent,
    @dragstart: DragEvent,
    @drop: DragEvent,
    @durationchange: Event,
    @emptied: Event,
    @ended: Event,
    @error: ErrorEvent,
    @focus: FocusEvent,
    @focusin: FocusEvent,
    @focusout: FocusEvent,
    @formdata: FormDataEvent,
    @fullscreenchange: Event,
    @fullscreenerror: Event,
    @gotpointercapture: PointerEvent,
    @input: Event,
    @invalid: Event,
    @keydown: KeyboardEvent,
    @keypress: KeyboardEvent,
    @keyup: KeyboardEvent,
    @load: Event,
    @loadeddata: Event,
    @loadedmetadata: Event,
    @loadstart: Event,
    @lostpointercapture: PointerEvent,
    @mousedown: MouseEvent,
    @mouseenter: MouseEvent,
    @mouseleave: MouseEvent,
    @mousemove: MouseEvent,
    @mouseout: MouseEvent,
    @mouseover: MouseEvent,
    @mouseup: MouseEvent,
    @paste: ClipboardEvent,
    @pause: Event,
    @play: Event,
    @playing: Event,
    @pointercancel: PointerEvent,
    @pointerdown: PointerEvent,
    @pointerenter: PointerEvent,
    @pointerleave: PointerEvent,
    @pointermove: PointerEvent,
    @pointerout: PointerEvent,
    @pointerover: PointerEvent,
    @pointerup: PointerEvent,
    @progress: ProgressEvent,
    @ratechange: Event,
    @reset: Event,
    @resize: UIEvent,
    @scroll: Event,
    @securitypolicyviolation: SecurityPolicyViolationEvent,
    @seeked: Event,
    @seeking: Event,
    @select: Event,
    @selectionchange: Event,
    @selectstart: Event,
    @slotchange: Event,
    @stalled: Event,
    @submit: SubmitEvent,
    @suspend: Event,
    @timeupdate: Event,
    @toggle: Event,
    @touchcancel: TouchEvent,
    @touchend: TouchEvent,
    @touchmove: TouchEvent,
    @touchstart: TouchEvent,
    @transitioncancel: TransitionEvent,
    @transitionend: TransitionEvent,
    @transitionrun: TransitionEvent,
    @transitionstart: TransitionEvent,
    @volumechange: Event,
    @waiting: Event,
    @wheel: WheelEvent,
}
+ARIA {
    ariaAtomic: string,
    ariaAutoComplete: string,
    ariaBusy: string,
    ariaChecked: string,
    ariaColCount: string,
    ariaColIndex: string,
    ariaColIndexText: string,
    ariaColSpan: string,
    ariaCurrent: string,
    ariaDisabled: string,
    ariaExpanded: string,
    ariaHasPopup: string,
    ariaHidden: string,
    ariaInvalid: string,
    ariaKeyShortcuts: string,
    ariaLabel: string,
    ariaLevel: string,
    ariaLive: string,
    ariaModal: string,
    ariaMultiLine: string,
    ariaMultiSelectable: string,
    ariaOrientation: string,
    ariaPlaceholder: string,
    ariaPosInSet: string,
    ariaPressed: string,
    ariaReadOnly: string,
    ariaRequired: string,
    ariaRoleDescription: string,
    ariaRowCount: string,
    ariaRowIndex: string,
    ariaRowIndexText: string,
    ariaRowSpan: string,
    ariaSelected: string,
    ariaSetSize: string,
    ariaSort: string,
    ariaValueMax: string,
    ariaValueMin: string,
    ariaValueNow: string,
    ariaValueText: string,
    role: string,
}
+HTML {
    +EVENT,
    +ARIA,
    accessKey: string,
    autocapitalize: string,
    autofocus: boolean,
    className: string,
    contentEditable: string,
    dir: string,
    draggable: boolean,
    enterKeyHint: string,
    hidden: boolean,
    id: string,
    inert: boolean,
    inputMode: string,
    lang: string,
    nonce: string,
    outerHTML: string,
    outerText: string,
    scrollLeft: number,
    scrollTop: number,
    slot: string,
    spellcheck: boolean,
    tabIndex: number,
    title: string,
    translate: boolean,
}
+SVG {
    +EVENT,
    +ARIA,
    *id: string,
    *lang: string,
    *tabindex: string,
}
a(class=HTMLAnchorElement) {
    +HTML,
    charset: string,
    coords: string,
    download: string,
    hash: string,
    host: string,
    hostname: string,
    href: string,
    hreflang: string,
    name: string,
    password: string,
    pathname: string,
    ping: string,
    port: string,
    protocol: string,
    referrerPolicy: string,
    rel: string,
    rev: string,
    search: string,
    shape: string,
    target: string,
    text: string,
    type: string,
    username: string,
}
abbr(class=HTMLElement) {
    +HTML,
}
address(class=HTMLElement) {
    +HTML,
}
area(class=HTMLAreaElement) {
    +HTML,
    alt: string,
    coords: string,
    download: string,
    hash: string,
    host: string,
    hostname: string,
    href: string,
    noHref: boolean,
    password: string,
    pathname: string,
    ping: string,
    port: string,
    protocol: string,
    referrerPolicy: string,
    rel: string,
    search: string,
    shape: string,
    target: string,
    username: string,
}
article(class=HTMLElement) {
    +HTML,
}
aside(class=HTMLElement) {
    +HTML,
}
audio(class=HTMLAudioElement) {
    +HTML,
    @encrypted: MediaEncryptedEvent,
    @waitingforkey: Event,
    autoplay: boolean,
    controls: boolean,
    crossOrigin: string,
    currentTime: number,
    defaultMuted: boolean,
    defaultPlaybackRate: number,
    disableRemotePlayback: boolean,
    loop: boolean,
    muted: boolean,
    playbackRate: number,
    preload: ("" "auto" "metadata" "none"),
    preservesPitch: boolean,
    src: string,
    volume: number,
}
b(class=HTMLElement) {
    +HTML,
}
base(class=HTMLBaseElement) {
    +HTML,
    href: string,
    target: string,
}
bdi(class=HTMLElement) {
    +HTML,
}
bdo(class=HTMLElement) {
    +HTML,
}
blockquote(class=HTMLQuoteElement) {
    +HTML,
    cite: string,
}
body(class=HTMLBodyElement) {
    +HTML,
    @afterprint: Event,
    @beforeprint: Event,
    @beforeunload: BeforeUnloadEvent,
    @gamepadconnected: GamepadEvent,
    @gamepaddisconnected: GamepadEvent,
    @hashchange: HashChangeEvent,
    @languagechange: Event,
    @message: MessageEvent,
    @messageerror: MessageEvent,
    @offline: Event,
    @online: Event,
    @pagehide: PageTransitionEvent,
    @pageshow: PageTransitionEvent,
    @popstate: PopStateEvent,
    @rejectionhandled: PromiseRejectionEvent,
    @storage: StorageEvent,
    @unhandledrejection: PromiseRejectionEvent,
    @unload: Event,
    aLink: string,
    background: string,
    bgColor: string,
    link: string,
    text: string,
    vLink: string,
}
br(class=HTMLBRElement) {
    +HTML,
    clear: string,
}
button(class=HTMLButtonElement) {
    +HTML,
    disabled: boolean,
    formAction: string,
    formEnctype: string,
    formMethod: string,
    formNoValidate: boolean,
    formTarget: string,
    name: string,
    type: string,
    value: string,
}
canvas(class=HTMLCanvasElement) {
    +HTML,
    height: number,
    width: number,
}
caption(class=HTMLTableCaptionElement) {
    +HTML,
    align: string,
}
cite(class=HTMLElement) {
    +HTML,
}
code(class=HTMLElement) {
    +HTML,
}
col(class=HTMLTableColElement) {
    +HTML,
    align: string,
    ch: string,
    chOff: string,
    span: number,
    vAlign: string,
    width: string,
}
colgroup(class=HTMLTableColElement) {
    +HTML,
    align: string,
    ch: string,
    chOff: string,
    span: number,
    vAlign: string,
    width: string,
}
data(class=HTMLDataElement) {
    +HTML,
    value: string,
}
datalist(class=HTMLDataListElement) {
    +HTML,
}
dd(class=HTMLElement) {
    +HTML,
}
del(class=HTMLModElement) {
    +HTML,
    cite: string,
    dateTime: string,
}
details(class=HTMLDetailsElement) {
    +HTML,
    open: boolean,
}
dfn(class=HTMLElement) {
    +HTML,
}
dialog(class=HTMLDialogElement) {
    +HTML,
    open: boolean,
    returnValue: string,
}
div(class=HTMLDivElement) {
    +HTML,
    align: string,
}
dl(class=HTMLDListElement) {
    +HTML,
    compact: boolean,
}
dt(class=HTMLElement) {
    +HTML,
}
em(class=HTMLElement) {
    +HTML,
}
embed(class=HTMLEmbedElement) {
    +HTML,
    align: string,
    height: string,
    name: string,
    src: string,
    type: string,
    width: string,
}
fieldset(class=HTMLFieldSetElement) {
    +HTML,
    disabled: boolean,
    name: string,
}
figcaption(class=HTMLElement) {
    +HTML,
}
figure(class=HTMLElement) {
    +HTML,
}
footer(class=HTMLElement) {
    +HTML,
}
form(class=HTMLFormElement) {
    +HTML,
}
h1(class=HTMLHeadingElement) {
    +HTML,
    align: string,
}
h2(class=HTMLHeadingElement) {
    +HTML,
    align: string,
}
h3(class=HTMLHeadingElement) {
    +HTML,
    align: string,
}
h4(class=HTMLHeadingElement) {
    +HTML,
    align: string,
}
h5(class=HTMLHeadingElement) {
    +HTML,
    align: string,
}
h6(class=HTMLHeadingElement) {
    +HTML,
    align: string,
}
head(class=HTMLHeadElement) {
    +HTML,
}
header(class=HTMLElement) {
    +HTML,
}
hgroup(class=HTMLElement) {
    +HTML,
}
hr(class=HTMLHRElement) {
    +HTML,
    align: string,
    color: string,
    noShade: boolean,
    size: string,
    width: string,
}
html(class=HTMLHtmlElement) {
    +HTML,
    version: string,
}
i(class=HTMLElement) {
    +HTML,
}
iframe(class=HTMLIFrameElement) {
    +HTML,
    align: string,
    allow: string,
    allowFullscreen: boolean,
    frameBorder: string,
    height: string,
    longDesc: string,
    marginHeight: string,
    marginWidth: string,
    name: string,
    referrerPolicy: ("" "no-referrer" "no-referrer-when-downgrade" "origin" "origin-when-cross-origin" "same-origin" "strict-origin" "strict-origin-when-cross-origin" "unsafe-url"),
    scrolling: string,
    src: string,
    srcdoc: string,
    width: string,
}
img(class=HTMLImageElement) {
    +HTML,
    align: string,
    alt: string,
    border: string,
    crossOrigin: string,
    decoding: ("async" "auto" "sync"),
    height: number,
    hspace: number,
    isMap: boolean,
    loading: ("eager" "lazy"),
    longDesc: string,
    lowsrc: string,
    name: string,
    referrerPolicy: string,
    sizes: string,
    src: string,
    srcset: string,
    useMap: string,
    vspace: number,
    width: number,
}
input(class=HTMLInputElement) {
    +HTML,
    accept: string,
    align: string,
    alt: string,
    autocomplete: string,
    capture: string,
    checked: boolean,
    defaultChecked: boolean,
    defaultValue: string,
    dirName: string,
    disabled: boolean,
    formAction: string,
    formEnctype: string,
    formMethod: string,
    formNoValidate: boolean,
    formTarget: string,
    height: number,
    indeterminate: boolean,
    max: string,
    maxLength: number,
    min: string,
    minLength: number,
    multiple: boolean,
    name: string,
    pattern: string,
    placeholder: string,
    readOnly: boolean,
    required: boolean,
    selectionDirection: ("backward" "forward" "none"),
    selectionEnd: number,
    selectionStart: number,
    size: number,
    src: string,
    step: string,
    type: string,
    useMap: string,
    value: string,
    valueAsNumber: number,
    width: number,
}
ins(class=HTMLModElement) {
    +HTML,
    cite: string,
    dateTime: string,
}
kbd(class=HTMLElement) {
    +HTML,
}
label(class=HTMLLabelElement) {
    +HTML,
    htmlFor: string,
}
legend(class=HTMLLegendElement) {
    +HTML,
    align: string,
}
li(class=HTMLLIElement) {
    +HTML,
    type: string,
    value: number,
}
link(class=HTMLLinkElement) {
    +HTML,
    as: string,
    charset: string,
    crossOrigin: string,
    disabled: boolean,
    href: string,
    hreflang: string,
    imageSizes: string,
    imageSrcset: string,
    integrity: string,
    media: string,
    referrerPolicy: string,
    rel: string,
    rev: string,
    target: string,
    type: string,
}
main(class=HTMLElement) {
    +HTML,
}
map(class=HTMLMapElement) {
    +HTML,
    name: string,
}
mark(class=HTMLElement) {
    +HTML,
}
menu(class=HTMLMenuElement) {
    +HTML,
    compact: boolean,
}
meta(class=HTMLMetaElement) {
    +HTML,
    content: string,
    httpEquiv: string,
    media: string,
    name: string,
    scheme: string,
}
meter(class=HTMLMeterElement) {
    +HTML,
    high: number,
    low: number,
    max: number,
    min: number,
    optimum: number,
    value: number,
}
nav(class=HTMLElement) {
    +HTML,
}
noscript(class=HTMLElement) {
    +HTML,
}
object(class=HTMLObjectElement) {
    +HTML,
    align: string,
    archive: string,
    border: string,
    code: string,
    codeBase: string,
    codeType: string,
    data: string,
    declare: boolean,
    height: string,
    hspace: number,
    name: string,
    standby: string,
    type: string,
    useMap: string,
    vspace: number,
    width: string,
}
ol(class=HTMLOListElement) {
    +HTML,
    compact: boolean,
    reversed: boolean,
    start: number,
    type: string,
}
optgroup(class=HTMLOptGroupElement) {
    +HTML,
    disabled: boolean,
    label: string,
}
option(class=HTMLOptionElement) {
    +HTML,
    defaultSelected: boolean,
    disabled: boolean,
    label: string,
    selected: boolean,
    text: string,
    value: string,
}
output(class=HTMLOutputElement) {
    +HTML,
    defaultValue: string,
    name: string,
    value: string,
}
p(class=HTMLParagraphElement) {
    +HTML,
    align: string,
}
picture(class=HTMLPictureElement) {
    +HTML,
}
pre(class=HTMLPreElement) {
    +HTML,
    width: number,
}
progress(class=HTMLProgressElement) {
    +HTML,
    max: number,
    value: number,
}
q(class=HTMLQuoteElement) {
    +HTML,
    cite: string,
}
rp(class=HTMLElement) {
    +HTML,
}
rt(class=HTMLElement) {
    +HTML,
}
ruby(class=HTMLElement) {
    +HTML,
}
s(class=HTMLElement) {
    +HTML,
}
samp(class=HTMLElement) {
    +HTML,
}
script(class=HTMLScriptElement) {
    +HTML,
    async: boolean,
    charset: string,
    crossOrigin: string,
    defer: boolean,
    event: string,
    htmlFor: string,
    integrity: string,
    noModule: boolean,
    referrerPolicy: string,
    src: string,
    text: string,
    type: string,
}
section(class=HTMLElement) {
    +HTML,
}
select(class=HTMLSelectElement) {
    +HTML,
    autocomplete: string,
    disabled: boolean,
    length: number,
    multiple: boolean,
    name: string,
    required: boolean,
    selectedIndex: number,
    size: number,
    value: string,
}
slot(class=HTMLSlotElement) {
    +HTML,
    name: string,
}
small(class=HTMLElement) {
    +HTML,
}
source(class=HTMLSourceElement) {
    +HTML,
    height: number,
    media: string,
    sizes: string,
    src: string,
    srcset: string,
    type: string,
    width: number,
}
span(class=HTMLSpanElement) {
    +HTML,
}
strong(class=HTMLElement) {
    +HTML,
}
style(class=HTMLStyleElement) {
    +HTML,
    disabled: boolean,
    media: string,
    type: string,
}
sub(class=HTMLElement) {
    +HTML,
}
summary(class=HTMLElement) {
    +HTML,
}
sup(class=HTMLElement) {
    +HTML,
}
table(class=HTMLTableElement) {
    +HTML,
    align: string,
    bgColor: string,
    border: string,
    cellPadding: string,
    cellSpacing: string,
    frame: string,
    rules: string,
    summary: string,
    width: string,
}
tbody(class=HTMLTableSectionElement) {
    +HTML,
    align: string,
    ch: string,
    chOff: string,
    vAlign: string,
}
td(class=HTMLTableCellElement) {
    +HTML,
    abbr: string,
    align: string,
    axis: string,
    bgColor: string,
    ch: string,
    chOff: string,
    colSpan: number,
    headers: string,
    height: string,
    noWrap: boolean,
    rowSpan: number,
    scope: string,
    vAlign: string,
    width: string,
}
template(class=HTMLTemplateElement) {
    +HTML,
}
textarea(class=HTMLTextAreaElement) {
    +HTML,
    autocomplete: string,
    cols: number,
    defaultValue: string,
    dirName: string,
    disabled: boolean,
    maxLength: number,
    minLength: number,
    name: string,
    placeholder: string,
    readOnly: boolean,
    required: boolean,
    rows: number,
    selectionDirection: ("backward" "forward" "none"),
    selectionEnd: number,
    selectionStart: number,
    value: string,
    wrap: string,
}
tfoot(class=HTMLTableSectionElement) {
    +HTML,
    align: string,
    ch: string,
    chOff: string,
    vAlign: string,
}
th(class=HTMLTableCellElement) {
    +HTML,
    abbr: string,
    align: string,
    axis: string,
    bgColor: string,
    ch: string,
    chOff: string,
    colSpan: number,
    headers: string,
    height: string,
    noWrap: boolean,
    rowSpan: number,
    scope: string,
    vAlign: string,
    width: string,
}
thead(class=HTMLTableSectionElement) {
    +HTML,
    align: string,
    ch: string,
    chOff: string,
    vAlign: string,
}
time(class=HTMLTimeElement) {
    +HTML,
    dateTime: string,
}
title(class=HTMLTitleElement) {
    +HTML,
    text: string,
}
tr(class=HTMLTableRowElement) {
    +HTML,
    align: string,
    bgColor: string,
    ch: string,
    chOff: string,
    vAlign: string,
}
track(class=HTMLTrackElement) {
    +HTML,
    default: boolean,
    kind: string,
    label: string,
    src: string,
    srclang: string,
}
u(class=HTMLElement) {
    +HTML,
}
ul(class=HTMLUListElement) {
    +HTML,
    compact: boolean,
    type: string,
}
var(class=HTMLElement) {
    +HTML,
}
video(class=HTMLVideoElement) {
    +HTML,
    @encrypted: MediaEncryptedEvent,
    @enterpictureinpicture: Event,
    @leavepictureinpicture: Event,
    @waitingforkey: Event,
    autoplay: boolean,
    controls: boolean,
    crossOrigin: string,
    currentTime: number,
    defaultMuted: boolean,
    defaultPlaybackRate: number,
    disablePictureInPicture: boolean,
    disableRemotePlayback: boolean,
    height: number,
    loop: boolean,
    muted: boolean,
    playbackRate: number,
    playsInline: boolean,
    poster: string,
    preload: ("" "auto" "metadata" "none"),
    preservesPitch: boolean,
    src: string,
    volume: number,
    width: number,
}
wbr(class=HTMLElement) {
    +HTML,
}
animate(class=SVGAnimateElement ns="http://www.w3.org/2000/svg") {
    +SVG,
    *accumulate: ("none" "sum"),
    *additive: ("replace" "sum"),
    *attributeName: string,
    *attributeType: ("CSS" "XML" "auto"),
    *begin: string,
    *by: string,
    *calcMode: ("discrete" "linear" "paced" "spline"),
    *color-interpolation: ("auto" "inherit" "linearRGB" "sRGB"),
    *color-rendering: ("auto" "inherit" "optimizeQuality" "optimizeSpeed"),
    *dur: string,
    *end: string,
    *externalResourcesRequired: boolean,
    *fill: ("freeze" "remove"),
    *from: string,
    *keySplines: string,
    *keyTimes: string,
    *max: string,
    *min: string,
    *repeatCount: ("indefinite"),
    *repeatDur: string,
    *requiredExtensions: string,
    *requiredFeatures: string,
    *restart: ("always" "never" "whenNotActive"),
    *systemLanguage: string,
    *to: string,
    *values: string,
}
animateMotion(class=SVGAnimateMotionElement ns="http://www.w3.org/2000/svg") {
    +SVG,
    *accumulate: ("none" "sum"),
    *additive: ("replace" "sum"),
    *attributeName: string,
    *begin: string,
    *by: string,
    *calcMode: ("discrete" "linear" "paced" "spline"),
    *dur: string,
    *end: string,
    *externalResourcesRequired: boolean,
    *fill: ("freeze" "remove"),
    *from: string,
    *keyPoints: string,
    *keySplines: string,
    *keyTimes: string,
    *max: string,
    *min: string,
    *path: string,
    *repeatCount: ("indefinite"),
    *repeatDur: string,
    *requiredExtensions: string,
    *requiredFeatures: string,
    *restart: ("always" "never" "whenNotActive"),
    *rotate: string,
    *systemLanguage: string,
    *to: string,
    *values: string,
}
animateTransform(class=SVGAnimateTransformElement ns="http://www.w3.org/2000/svg") {
    +SVG,
    *accumulate: ("none" "sum"),
    *additive: ("replace" "sum"),
    *attributeName: string,
    *attributeType: ("CSS" "XML" "auto"),
    *begin: string,
    *by: string,
    *calcMode: ("discrete" "linear" "paced" "spline"),
    *dur: string,
    *end: string,
    *externalResourcesRequired: boolean,
    *fill: ("freeze" "remove"),
    *from: string,
    *keySplines: string,
    *keyTimes: string,
    *max: string,
    *min: string,
    *repeatCount: ("indefinite"),
    *repeatDur: string,
    *requiredExtensions: string,
    *requiredFeatures: string,
    *restart: ("always" "never" "whenNotActive"),
    *systemLanguage: string,
    *to: string,
    *type: ("rotate" "scale" "skewX" "skewY" "translate"),
    *values: string,
}
circle(class=SVGCircleElement ns="http://www.w3.org/2000/svg") {
    +SVG,
    *class: string,
    *clip-rule: ("evenodd" "inherit" "nonzero"),
    *color: string,
    *color-interpolation: ("auto" "inherit" "linearRGB" "sRGB"),
    *color-rendering: ("auto" "inherit" "optimizeQuality" "optimizeSpeed"),
    *cursor: string,
    *cx: string,
    *cy: string,
    *display: string,
    *fill: string,
    *fill-opacity: string,
    *fill-rule: ("evenodd" "inherit" "nonzero"),
    *filter: string,
    *mask: string,
    *opacity: string,
    *pointer-events: ("all" "bounding-box" "color" "fill" "inherit" "none" "painted" "stroke" "visible" "visibleFill" "visiblePainted" "visibleStroke"),
    *r: string,
    *requiredExtensions: string,
    *requiredFeatures: string,
    *shape-rendering: ("auto" "crispEdges" "geometricPrecision" "inherit" "optimizeSpeed"),
    *stroke: string,
    *stroke-dasharray: string,
    *stroke-dashoffset: string,
    *stroke-linecap: ("butt" "inherit" "round" "square"),
    *stroke-linejoin: ("arcs" "bevel" "inherit" "miter" "miter-clip" "round"),
    *stroke-miterlimit: string,
    *stroke-opacity: string,
    *stroke-width: string,
    *style: string,
    *systemLanguage: string,
    *transform: string,
    *visibility: ("collapse" "hidden" "inherit" "visible"),
}
clipPath(class=SVGClipPathElement ns="http://www.w3.org/2000/svg") {
    +SVG,
    *class: string,
    *clip-path: string,
    *clipPathUnits: ("objectBoundingBox" "userSpaceOnUse"),
    *externalResourcesRequired: boolean,
    *requiredExtensions: string,
    *requiredFeatures: string,
    *style: string,
    *systemLanguage: string,
    *transform: string,
}
defs(class=SVGDefsElement ns="http://www.w3.org/2000/svg") {
    +SVG,
    *class: string,
    *clip-path: string,
    *color: string,
    *color-interpolation: ("auto" "inherit" "linearRGB" "sRGB"),
    *color-rendering: ("auto" "inherit" "optimizeQuality" "optimizeSpeed"),
    *cursor: string,
    *enable-background: string,
    *externalResourcesRequired: boolean,
    *fill: string,
    *fill-opacity: string,
    *fill-rule: ("evenodd" "inherit" "nonzero"),
    *filter: string,
    *mask: string,
    *opacity: string,
    *requiredExtensions: string,
    *requiredFeatures: string,
    *shape-rendering: ("auto" "crispEdges" "geometricPrecision" "inherit" "optimizeSpeed"),
    *stroke: string,
    *stroke-dasharray: string,
    *stroke-dashoffset: string,
    *stroke-linecap: ("butt" "inherit" "round" "square"),
    *stroke-linejoin: ("arcs" "bevel" "inherit" "miter" "miter-clip" "round"),
    *stroke-miterlimit: string,
    *stroke-opacity: string,
    *stroke-width: string,
    *style: string,
    *systemLanguage: string,
    *transform: string,
}
desc(class=SVGDescElement ns="http://www.w3.org/2000/svg") {
    +SVG,
    *class: string,
    *style: string,
}
ellipse(class=SVGEllipseElement ns="http://www.w3.org/2000/svg") {
    +SVG,
    *class: string,
    *clip-rule: ("evenodd" "inherit" "nonzero"),
    *color: string,
    *color-interpolation: ("auto" "inherit" "linearRGB" "sRGB"),
    *color-rendering: ("auto" "inherit" "optimizeQuality" "optimizeSpeed"),
    *cursor: string,
    *cx: string,
    *cy: string,
    *display: string,
    *externalResourcesRequired: boolean,
    *fill: string,
    *fill-opacity: string,
    *fill-rule: ("evenodd" "inherit" "nonzero"),
    *filter: string,
    *mask: string,
    *opacity: string,
    *pointer-events: ("all" "bounding-box" "color" "fill" "inherit" "none" "painted" "stroke" "visible" "visibleFill" "visiblePainted" "visibleStroke"),
    *requiredExtensions: string,
    *requiredFeatures: string,
    *rx: string,
    *ry: string,
    *shape-rendering: ("auto" "crispEdges" "geometricPrecision" "inherit" "optimizeSpeed"),
    *stroke: string,
    *stroke-dasharray: string,
    *stroke-dashoffset: string,
    *stroke-linecap: ("butt" "inherit" "round" "square"),
    *stroke-linejoin: ("arcs" "bevel" "inherit" "miter" "miter-clip" "round"),
    *stroke-miterlimit: string,
    *stroke-opacity: string,
    *stroke-width: string,
    *style: string,
    *systemLanguage: string,
    *transform: string,
    *visibility: ("collapse" "hidden" "inherit" "visible"),
}
feBlend(class=SVGFEBlendElement ns="http://www.w3.org/2000/svg") {
    +SVG,
    *class: string,
    *color-interpolation-filters: ("auto" "inherit" "linearRGB" "sRGB"),
    *height: string,
    *in: string,
    *in2: string,
    *mode: ("darken" "lighten" "multiply" "normal" "screen"),
    *result: string,
    *style: string,
    *width: string,
    *x: string,
    *y: string,
}
feColorMatrix(class=SVGFEColorMatrixElement ns="http://www.w3.org/2000/svg") {
    +SVG,
    *class: string,
    *color-interpolation-filters: ("auto" "inherit" "linearRGB" "sRGB"),
    *height: string,
    *in: string,
    *result: string,
    *style: string,
    *type: ("hueRotate" "luminanceToAlpha" "matrix" "saturate"),
    *values: string,
    *width: string,
    *x: string,
    *y: string,
}
feComponentTransfer(class=SVGFEComponentTransferElement ns="http://www.w3.org/2000/svg") {
    +SVG,
    *class: string,
    *color-interpolation-filters: ("auto" "inherit" "linearRGB" "sRGB"),
    *height: string,
    *in: string,
    *result: string,
    *style: string,
    *width: string,
    *x: string,
    *y: string,
}
feComposite(class=SVGFECompositeElement ns="http://www.w3.org/2000/svg") {
    +SVG,
    *class: string,
    *color-interpolation-filters: ("auto" "inherit" "linearRGB" "sRGB"),
    *height: string,
    *in: string,
    *in2: string,
    *k1: string,
    *k2: string,
    *k3: string,
    *k4: string,
    *operator: ("arithmetic" "atop" "in" "out" "over" "xor"),
    *result: string,
    *style: string,
    *width: string,
    *x: string,
    *y: string,
}
feConvolveMatrix(class=SVGFEConvolveMatrixElement ns="http://www.w3.org/2000/svg") {
    +SVG,
    *bias: string,
    *class: string,
    *color-interpolation-filters: ("auto" "inherit" "linearRGB" "sRGB"),
    *divisor: string,
    *edgeMode: ("duplicate" "none" "wrap"),
    *height: string,
    *in: string,
    *kernelMatrix: string,
    *kernelUnitLength: string,
    *order: string,
    *preserveAlpha: boolean,
    *result: string,
    *style: string,
    *targetX: string,
    *targetY: string,
    *width: string,
    *x: string,
    *y: string,
}
feDiffuseLighting(class=SVGFEDiffuseLightingElement ns="http://www.w3.org/2000/svg") {
    +SVG,
    *class: string,
    *color: string,
    *color-interpolation-filters: ("auto" "inherit" "linearRGB" "sRGB"),
    *diffuseConstant: string,
    *height: string,
    *in: string,
    *kernelUnitLength: string,
    *lighting-color: string,
    *result: string,
    *style: string,
    *surfaceScale: string,
    *width: string,
    *x: string,
    *y: string,
}
feDisplacementMap(class=SVGFEDisplacementMapElement ns="http://www.w3.org/2000/svg") {
    +SVG,
    *class: string,
    *color-interpolation-filters: ("auto" "inherit" "linearRGB" "sRGB"),
    *height: string,
    *in: string,
    *in2: string,
    *result: string,
    *scale: string,
    *style: string,
    *width: string,
    *x: string,
    *xChannelSelector: ("A" "B" "G" "R"),
    *y: string,
    *yChannelSelector: ("A" "B" "G" "R"),
}
feDistantLight(class=SVGFEDistantLightElement ns="http://www.w3.org/2000/svg") {
    +SVG,
    *azimuth: string,
    *elevation: string,
}
feDropShadow(class=SVGFEDropShadowElement ns="http://www.w3.org/2000/svg") {
    +SVG,
    *autofocus: boolean,
    *nodeValue: string,
    *nonce: string,
    *outerHTML: string,
    *scrollLeft: number,
    *scrollTop: number,
    *slot: string,
}
feFlood(class=SVGFEFloodElement ns="http://www.w3.org/2000/svg") {
    +SVG,
    *class: string,
    *color: string,
    *color-interpolation-filters: ("auto" "inherit" "linearRGB" "sRGB"),
    *flood-color: string,
    *flood-opacity: string,
    *height: string,
    *result: string,
    *style: string,
    *width: string,
    *x: string,
    *y: string,
}
feFuncA(class=SVGFEFuncAElement ns="http://www.w3.org/2000/svg") {
    +SVG,
    *amplitude: string,
    *exponent: string,
    *intercept: string,
    *offset: string,
    *slope: string,
    *tableValues: string,
    *type: ("discrete" "gamma" "identity" "linear" "table"),
}
feFuncB(class=SVGFEFuncBElement ns="http://www.w3.org/2000/svg") {
    +SVG,
    *amplitude: string,
    *exponent: string,
    *intercept: string,
    *offset: string,
    *slope: string,
    *tableValues: string,
    *type: ("discrete" "gamma" "identity" "linear" "table"),
}
feFuncG(class=SVGFEFuncGElement ns="http://www.w3.org/2000/svg") {
    +SVG,
    *amplitude: string,
    *exponent: string,
    *intercept: string,
    *offset: string,
    *slope: string,
    *tableValues: string,
    *type: ("discrete" "gamma" "identity" "linear" "table"),
}
feFuncR(class=SVGFEFuncRElement ns="http://www.w3.org/2000/svg") {
    +SVG,
    *amplitude: string,
    *exponent: string,
    *intercept: string,
    *offset: string,
    *slope: string,
    *tableValues: string,
    *type: ("discrete" "gamma" "identity" "linear" "table"),
}
feGaussianBlur(class=SVGFEGaussianBlurElement ns="http://www.w3.org/2000/svg") {
    +SVG,
    *class: string,
    *color-interpolation-filters: ("auto" "inherit" "linearRGB" "sRGB"),
    *height: string,
    *in: string,
    *result: string,
    *stdDeviation: string,
    *style: string,
    *width: string,
    *x: string,
    *y: string,
}
feImage(class=SVGFEImageElement ns="http://www.w3.org/2000/svg") {
    +SVG,
    *class: string,
    *color-interpolation-filters: ("auto" "inherit" "linearRGB" "sRGB"),
    *externalResourcesRequired: boolean,
    *height: string,
    *href: string,
    *preserveAspectRatio: ("none" "xMaxYMax" "xMaxYMax meet" "xMaxYMax slice" "xMaxYMid" "xMaxYMid meet" "xMaxYMid slice" "xMaxYMin" "xMaxYMin meet" "xMaxYMin slice" "xMidYMax" "xMidYMax meet" "xMidYMax slice" "xMidYMid" "xMidYMid meet" "xMidYMid slice" "xMidYMin" "xMidYMin meet" "xMidYMin slice" "xMinYMax" "xMinYMax meet" "xMinYMax slice" "xMinYMid" "xMinYMid meet" "xMinYMid slice" "xMinYMin" "xMinYMin meet" "xMinYMin slice"),
    *result: string,
    *style: string,
    *width: string,
    *x: string,
    *y: string,
}
feMerge(class=SVGFEMergeElement ns="http://www.w3.org/2000/svg") {
    +SVG,
    *class: string,
    *color-interpolation-filters: ("auto" "inherit" "linearRGB" "sRGB"),
    *height: string,
    *result: string,
    *style: string,
    *width: string,
    *x: string,
    *y: string,
}
feMergeNode(class=SVGFEMergeNodeElement ns="http://www.w3.org/2000/svg") {
    +SVG,
    *in: string,
}
feMorphology(class=SVGFEMorphologyElement ns="http://www.w3.org/2000/svg") {
    +SVG,
    *class: string,
    *color-interpolation-filters: ("auto" "inherit" "linearRGB" "sRGB"),
    *height: string,
    *in: string,
    *operator: ("dilate" "erode"),
    *radius: string,
    *result: string,
    *style: string,
    *width: string,
    *x: string,
    *y: string,
}
feOffset(class=SVGFEOffsetElement ns="http://www.w3.org/2000/svg") {
    +SVG,
    *class: string,
    *color-interpolation-filters: ("auto" "inherit" "linearRGB" "sRGB"),
    *dx: string,
    *dy: string,
    *height: string,
    *in: string,
    *result: string,
    *style: string,
    *width: string,
    *x: string,
    *y: string,
}
fePointLight(class=SVGFEPointLightElement ns="http://www.w3.org/2000/svg") {
    +SVG,
    *x: string,
    *y: string,
    *z: string,
}
feSpecularLighting(class=SVGFESpecularLightingElement ns="http://www.w3.org/2000/svg") {
    +SVG,
    *class: string,
    *color: string,
    *color-interpolation-filters: ("auto" "inherit" "linearRGB" "sRGB"),
    *height: string,
    *in: string,
    *kernelUnitLength: string,
    *lighting-color: string,
    *result: string,
    *specularConstant: string,
    *specularExponent: string,
    *style: string,
    *surfaceScale: string,
    *width: string,
    *x: string,
    *y: string,
}
feSpotLight(class=SVGFESpotLightElement ns="http://www.w3.org/2000/svg") {
    +SVG,
    *limitingConeAngle: string,
    *pointsAtX: string,
    *pointsAtY: string,
    *pointsAtZ: string,
    *specularExponent: string,
    *x: string,
    *y: string,
    *z: string,
}
feTile(class=SVGFETileElement ns="http://www.w3.org/2000/svg") {
    +SVG,
    *class: string,
    *color-interpolation-filters: ("auto" "inherit" "linearRGB" "sRGB"),
    *height: string,
    *in: string,
    *result: string,
    *style: string,
    *width: string,
    *x: string,
    *y: string,
}
feTurbulence(class=SVGFETurbulenceElement ns="http://www.w3.org/2000/svg") {
    +SVG,
    *baseFrequency: string,
    *class: string,
    *color-interpolation-filters: ("auto" "inherit" "linearRGB" "sRGB"),
    *height: string,
    *numOctaves: string,
    *result: string,
    *seed: string,
    *stitchTiles: ("noStitch" "stitch"),
    *style: string,
    *type: ("fractalNoise" "turbulence"),
    *width: string,
    *x: string,
    *y: string,
}
filter(class=SVGFilterElement ns="http://www.w3.org/2000/svg") {
    +SVG,
    *class: string,
    *externalResourcesRequired: boolean,
    *filterRes: string,
    *filterUnits: ("objectBoundingBox" "userSpaceOnUse"),
    *height: string,
    *primitiveUnits: ("objectBoundingBox" "userSpaceOnUse"),
    *style: string,
    *width: string,
    *x: string,
    *y: string,
}
foreignObject(class=SVGForeignObjectElement ns="http://www.w3.org/2000/svg") {
    +SVG,
    *class: string,
    *clip: string,
    *display: string,
    *externalResourcesRequired: boolean,
    *height: string,
    *overflow: ("auto" "hidden" "inherit" "scroll" "visible"),
    *requiredExtensions: string,
    *requiredFeatures: string,
    *style: string,
    *systemLanguage: string,
    *transform: string,
    *viewBox: string,
    *visibility: ("collapse" "hidden" "inherit" "visible"),
    *width: string,
    *x: string,
    *y: string,
}
g(class=SVGGElement ns="http://www.w3.org/2000/svg") {
    +SVG,
    *class: string,
    *clip-path: string,
    *color: string,
    *color-interpolation: ("auto" "inherit" "linearRGB" "sRGB"),
    *color-rendering: ("auto" "inherit" "optimizeQuality" "optimizeSpeed"),
    *cursor: string,
    *display: string,
    *enable-background: string,
    *externalResourcesRequired: boolean,
    *fill: string,
    *fill-opacity: string,
    *fill-rule: ("evenodd" "inherit" "nonzero"),
    *filter: string,
    *mask: string,
    *opacity: string,
    *requiredExtensions: string,
    *requiredFeatures: string,
    *shape-rendering: ("auto" "crispEdges" "geometricPrecision" "inherit" "optimizeSpeed"),
    *stroke: string,
    *stroke-dasharray: string,
    *stroke-dashoffset: string,
    *stroke-linecap: ("butt" "inherit" "round" "square"),
    *stroke-linejoin: ("arcs" "bevel" "inherit" "miter" "miter-clip" "round"),
    *stroke-miterlimit: string,
    *stroke-opacity: string,
    *stroke-width: string,
    *style: string,
    *systemLanguage: string,
    *transform: string,
    *visibility: ("collapse" "hidden" "inherit" "visible"),
}
image(class=SVGImageElement ns="http://www.w3.org/2000/svg") {
    +SVG,
    *class: string,
    *clip: string,
    *clip-rule: ("evenodd" "inherit" "nonzero"),
    *color-interpolation: ("auto" "inherit" "linearRGB" "sRGB"),
    *color-profile: string,
    *color-rendering: ("auto" "inherit" "optimizeQuality" "optimizeSpeed"),
    *cursor: string,
    *display: string,
    *filter: string,
    *height: string,
    *href: string,
    *image-rendering: ("auto" "inherit" "optimizeQuality" "optimizeSpeed"),
    *mask: string,
    *opacity: string,
    *overflow: ("auto" "hidden" "inherit" "scroll" "visible"),
    *pointer-events: ("all" "bounding-box" "color" "fill" "inherit" "none" "painted" "stroke" "visible" "visibleFill" "visiblePainted" "visibleStroke"),
    *preserveAspectRatio: ("defer none" "defer xMaxYMax" "defer xMaxYMax meet" "defer xMaxYMax slice" "defer xMaxYMid" "defer xMaxYMid meet" "defer xMaxYMid slice" "defer xMaxYMin" "defer xMaxYMin meet" "defer xMaxYMin slice" "defer xMidYMax" "defer xMidYMax meet" "defer xMidYMax slice" "defer xMidYMid" "defer xMidYMid meet" "defer xMidYMid slice" "defer xMidYMin" "defer xMidYMin meet" "defer xMidYMin slice" "defer xMinYMax" "defer xMinYMax meet" "defer xMinYMax slice" "defer xMinYMid" "defer xMinYMid meet" "defer xMinYMid slice" "defer xMinYMin" "defer xMinYMin meet" "defer xMinYMin slice" "none" "xMaxYMax" "xMaxYMax meet" "xMaxYMax slice" "xMaxYMid" "xMaxYMid meet" "xMaxYMid slice" "xMaxYMin" "xMaxYMin meet" "xMaxYMin slice" "xMidYMax" "xMidYMax meet" "xMidYMax slice" "xMidYMid" "xMidYMid meet" "xMidYMid slice" "xMidYMin" "xMidYMin meet" "xMidYMin slice" "xMinYMax" "xMinYMax meet" "xMinYMax slice" "xMinYMid" "xMinYMid meet" "xMinYMid slice" "xMinYMin" "xMinYMin meet" "xMinYMin slice"),
    *requiredExtensions: string,
    *requiredFeatures: string,
    *style: string,
    *systemLanguage: string,
    *transform: string,
    *viewBox: string,
    *visibility: ("collapse" "hidden" "inherit" "visible"),
    *width: string,
    *x: string,
    *y: string,
}
line(class=SVGLineElement ns="http://www.w3.org/2000/svg") {
    +SVG,
    *class: string,
    *clip-rule: ("evenodd" "inherit" "nonzero"),
    *color: string,
    *color-interpolation: ("auto" "inherit" "linearRGB" "sRGB"),
    *color-rendering: ("auto" "inherit" "optimizeQuality" "optimizeSpeed"),
    *cursor: string,
    *display: string,
    *externalResourcesRequired: boolean,
    *fill: string,
    *fill-opacity: string,
    *fill-rule: ("evenodd" "inherit" "nonzero"),
    *filter: string,
    *marker-end: string,
    *marker-mid: string,
    *marker-start: string,
    *mask: string,
    *opacity: string,
    *pointer-events: ("all" "bounding-box" "color" "fill" "inherit" "none" "painted" "stroke" "visible" "visibleFill" "visiblePainted" "visibleStroke"),
    *requiredExtensions: string,
    *requiredFeatures: string,
    *shape-rendering: ("auto" "crispEdges" "geometricPrecision" "inherit" "optimizeSpeed"),
    *stroke: string,
    *stroke-dasharray: string,
    *stroke-dashoffset: string,
    *stroke-linecap: ("butt" "inherit" "round" "square"),
    *stroke-linejoin: ("arcs" "bevel" "inherit" "miter" "miter-clip" "round"),
    *stroke-miterlimit: string,
    *stroke-opacity: string,
    *stroke-width: string,
    *style: string,
    *systemLanguage: string,
    *transform: string,
    *visibility: ("collapse" "hidden" "inherit" "visible"),
    *x1: string,
    *x2: string,
    *y1: string,
    *y2: string,
}
linearGradient(class=SVGLinearGradientElement ns="http://www.w3.org/2000/svg") {
    +SVG,
    *class: string,
    *externalResourcesRequired: boolean,
    *gradientTransform: string,
    *gradientUnits: ("objectBoundingBox" "userSpaceOnUse"),
    *spreadMethod: ("pad" "reflect" "repeat"),
    *style: string,
    *x1: string,
    *x2: string,
    *y1: string,
    *y2: string,
}
marker(class=SVGMarkerElement ns="http://www.w3.org/2000/svg") {
    +SVG,
    *class: string,
    *clip: string,
    *clip-path: string,
    *color: string,
    *color-interpolation: ("auto" "inherit" "linearRGB" "sRGB"),
    *color-rendering: ("auto" "inherit" "optimizeQuality" "optimizeSpeed"),
    *cursor: string,
    *enable-background: string,
    *externalResourcesRequired: boolean,
    *fill: string,
    *fill-opacity: string,
    *fill-rule: ("evenodd" "inherit" "nonzero"),
    *filter: string,
    *markerHeight: string,
    *markerUnits: ("strokeWidth" "userSpaceOnUse"),
    *markerWidth: string,
    *mask: string,
    *opacity: string,
    *orient: string,
    *overflow: ("auto" "hidden" "inherit" "scroll" "visible"),
    *preserveAspectRatio: ("none" "xMaxYMax" "xMaxYMax meet" "xMaxYMax slice" "xMaxYMid" "xMaxYMid meet" "xMaxYMid slice" "xMaxYMin" "xMaxYMin meet" "xMaxYMin slice" "xMidYMax" "xMidYMax meet" "xMidYMax slice" "xMidYMid" "xMidYMid meet" "xMidYMid slice" "xMidYMin" "xMidYMin meet" "xMidYMin slice" "xMinYMax" "xMinYMax meet" "xMinYMax slice" "xMinYMid" "xMinYMid meet" "xMinYMid slice" "xMinYMin" "xMinYMin meet" "xMinYMin slice"),
    *refX: string,
    *refY: string,
    *shape-rendering: ("auto" "crispEdges" "geometricPrecision" "inherit" "optimizeSpeed"),
    *stroke: string,
    *stroke-dasharray: string,
    *stroke-dashoffset: string,
    *stroke-linecap: ("butt" "inherit" "round" "square"),
    *stroke-linejoin: ("arcs" "bevel" "inherit" "miter" "miter-clip" "round"),
    *stroke-miterlimit: string,
    *stroke-opacity: string,
    *stroke-width: string,
    *style: string,
    *viewBox: string,
}
mask(class=SVGMaskElement ns="http://www.w3.org/2000/svg") {
    +SVG,
    *class: string,
    *clip-path: string,
    *color: string,
    *color-interpolation: ("auto" "inherit" "linearRGB" "sRGB"),
    *color-rendering: ("auto" "inherit" "optimizeQuality" "optimizeSpeed"),
    *cursor: string,
    *enable-background: string,
    *externalResourcesRequired: boolean,
    *fill: string,
    *fill-opacity: string,
    *fill-rule: ("evenodd" "inherit" "nonzero"),
    *height: string,
    *mask: string,
    *maskContentUnits: ("objectBoundingBox" "userSpaceOnUse"),
    *maskUnits: ("objectBoundingBox" "userSpaceOnUse"),
    *requiredExtensions: string,
    *requiredFeatures: string,
    *shape-rendering: ("auto" "crispEdges" "geometricPrecision" "inherit" "optimizeSpeed"),
    *stroke: string,
    *stroke-dasharray: string,
    *stroke-dashoffset: string,
    *stroke-linecap: ("butt" "inherit" "round" "square"),
    *stroke-linejoin: ("arcs" "bevel" "inherit" "miter" "miter-clip" "round"),
    *stroke-miterlimit: string,
    *stroke-opacity: string,
    *stroke-width: string,
    *style: string,
    *systemLanguage: string,
    *width: string,
    *x: string,
    *y: string,
}
metadata(class=SVGMetadataElement ns="http://www.w3.org/2000/svg") {
    +SVG,
}
mpath(class=SVGMPathElement ns="http://www.w3.org/2000/svg") {
    +SVG,
    *autofocus: boolean,
    *nodeValue: string,
    *nonce: string,
    *outerHTML: string,
    *scrollLeft: number,
    *scrollTop: number,
    *slot: string,
}
path(class=SVGPathElement ns="http://www.w3.org/2000/svg") {
    +SVG,
    *class: string,
    *clip-rule: ("evenodd" "inherit" "nonzero"),
    *color: string,
    *color-interpolation: ("auto" "inherit" "linearRGB" "sRGB"),
    *color-rendering: ("auto" "inherit" "optimizeQuality" "optimizeSpeed"),
    *cursor: string,
    *d: string,
    *display: string,
    *externalResourcesRequired: boolean,
    *fill: string,
    *fill-opacity: string,
    *fill-rule: ("evenodd" "inherit" "nonzero"),
    *filter: string,
    *marker-end: string,
    *marker-mid: string,
    *marker-start: string,
    *mask: string,
    *opacity: string,
    *pathLength: string,
    *pointer-events: ("all" "bounding-box" "color" "fill" "inherit" "none" "painted" "stroke" "visible" "visibleFill" "visiblePainted" "visibleStroke"),
    *requiredExtensions: string,
    *requiredFeatures: string,
    *shape-rendering: ("auto" "crispEdges" "geometricPrecision" "inherit" "optimizeSpeed"),
    *stroke: string,
    *stroke-dasharray: string,
    *stroke-dashoffset: string,
    *stroke-linecap: ("butt" "inherit" "round" "square"),
    *stroke-linejoin: ("arcs" "bevel" "inherit" "miter" "miter-clip" "round"),
    *stroke-miterlimit: string,
    *stroke-opacity: string,
    *stroke-width: string,
    *style: string,
    *systemLanguage: string,
    *transform: string,
    *visibility: ("collapse" "hidden" "inherit" "visible"),
}
pattern(class=SVGPatternElement ns="http://www.w3.org/2000/svg") {
    +SVG,
    *class: string,
    *clip: string,
    *clip-path: string,
    *color: string,
    *color-interpolation: ("auto" "inherit" "linearRGB" "sRGB"),
    *color-rendering: ("auto" "inherit" "optimizeQuality" "optimizeSpeed"),
    *cursor: string,
    *enable-background: string,
    *externalResourcesRequired: boolean,
    *fill: string,
    *fill-opacity: string,
    *fill-rule: ("evenodd" "inherit" "nonzero"),
    *filter: string,
    *height: string,
    *mask: string,
    *opacity: string,
    *overflow: ("auto" "hidden" "inherit" "scroll" "visible"),
    *patternContentUnits: ("objectBoundingBox" "userSpaceOnUse"),
    *patternTransform: string,
    *patternUnits: ("objectBoundingBox" "userSpaceOnUse"),
    *preserveAspectRatio: ("none" "xMaxYMax" "xMaxYMax meet" "xMaxYMax slice" "xMaxYMid" "xMaxYMid meet" "xMaxYMid slice" "xMaxYMin" "xMaxYMin meet" "xMaxYMin slice" "xMidYMax" "xMidYMax meet" "xMidYMax slice" "xMidYMid" "xMidYMid meet" "xMidYMid slice" "xMidYMin" "xMidYMin meet" "xMidYMin slice" "xMinYMax" "xMinYMax meet" "xMinYMax slice" "xMinYMid" "xMinYMid meet" "xMinYMid slice" "xMinYMin" "xMinYMin meet" "xMinYMin slice"),
    *requiredExtensions: string,
    *requiredFeatures: string,
    *shape-rendering: ("auto" "crispEdges" "geometricPrecision" "inherit" "optimizeSpeed"),
    *stroke: string,
    *stroke-dasharray: string,
    *stroke-dashoffset: string,
    *stroke-linecap: ("butt" "inherit" "round" "square"),
    *stroke-linejoin: ("arcs" "bevel" "inherit" "miter" "miter-clip" "round"),
    *stroke-miterlimit: string,
    *stroke-opacity: string,
    *stroke-width: string,
    *style: string,
    *systemLanguage: string,
    *viewBox: string,
    *width: string,
    *x: string,
    *y: string,
}
polygon(class=SVGPolygonElement ns="http://www.w3.org/2000/svg") {
    +SVG,
    *class: string,
    *clip-rule: ("evenodd" "inherit" "nonzero"),
    *color: string,
    *color-interpolation: ("auto" "inherit" "linearRGB" "sRGB"),
    *color-rendering: ("auto" "inherit" "optimizeQuality" "optimizeSpeed"),
    *cursor: string,
    *display: string,
    *externalResourcesRequired: boolean,
    *fill: string,
    *fill-opacity: string,
    *fill-rule: ("evenodd" "inherit" "nonzero"),
    *filter: string,
    *marker-end: string,
    *marker-mid: string,
    *marker-start: string,
    *mask: string,
    *opacity: string,
    *pointer-events: ("all" "bounding-box" "color" "fill" "inherit" "none" "painted" "stroke" "visible" "visibleFill" "visiblePainted" "visibleStroke"),
    *points: string,
    *requiredExtensions: string,
    *requiredFeatures: string,
    *shape-rendering: ("auto" "crispEdges" "geometricPrecision" "inherit" "optimizeSpeed"),
    *stroke: string,
    *stroke-dasharray: string,
    *stroke-dashoffset: string,
    *stroke-linecap: ("butt" "inherit" "round" "square"),
    *stroke-linejoin: ("arcs" "bevel" "inherit" "miter" "miter-clip" "round"),
    *stroke-miterlimit: string,
    *stroke-opacity: string,
    *stroke-width: string,
    *style: string,
    *systemLanguage: string,
    *transform: string,
    *visibility: ("collapse" "hidden" "inherit" "visible"),
}
polyline(class=SVGPolylineElement ns="http://www.w3.org/2000/svg") {
    +SVG,
    *class: string,
    *clip-rule: ("evenodd" "inherit" "nonzero"),
    *color: string,
    *color-interpolation: ("auto" "inherit" "linearRGB" "sRGB"),
    *color-rendering: ("auto" "inherit" "optimizeQuality" "optimizeSpeed"),
    *cursor: string,
    *display: string,
    *externalResourcesRequired: boolean,
    *fill: string,
    *fill-opacity: string,
    *fill-rule: ("evenodd" "inherit" "nonzero"),
    *filter: string,
    *marker-end: string,
    *marker-mid: string,
    *marker-start: string,
    *mask: string,
    *opacity: string,
    *pointer-events: ("all" "bounding-box" "color" "fill" "inherit" "none" "painted" "stroke" "visible" "visibleFill" "visiblePainted" "visibleStroke"),
    *points: string,
    *requiredExtensions: string,
    *requiredFeatures: string,
    *shape-rendering: ("auto" "crispEdges" "geometricPrecision" "inherit" "optimizeSpeed"),
    *stroke: string,
    *stroke-dasharray: string,
    *stroke-dashoffset: string,
    *stroke-linecap: ("butt" "inherit" "round" "square"),
    *stroke-linejoin: ("arcs" "bevel" "inherit" "miter" "miter-clip" "round"),
    *stroke-miterlimit: string,
    *stroke-opacity: string,
    *stroke-width: string,
    *style: string,
    *systemLanguage: string,
    *transform: string,
    *visibility: ("collapse" "hidden" "inherit" "visible"),
}
radialGradient(class=SVGRadialGradientElement ns="http://www.w3.org/2000/svg") {
    +SVG,
    *class: string,
    *cx: string,
    *cy: string,
    *externalResourcesRequired: boolean,
    *fx: string,
    *fy: string,
    *gradientTransform: string,
    *gradientUnits: ("objectBoundingBox" "userSpaceOnUse"),
    *r: string,
    *spreadMethod: ("pad" "reflect" "repeat"),
    *style: string,
}
rect(class=SVGRectElement ns="http://www.w3.org/2000/svg") {
    +SVG,
    *class: string,
    *clip-rule: ("evenodd" "inherit" "nonzero"),
    *color: string,
    *color-interpolation: ("auto" "inherit" "linearRGB" "sRGB"),
    *color-rendering: ("auto" "inherit" "optimizeQuality" "optimizeSpeed"),
    *cursor: string,
    *display: string,
    *externalResourcesRequired: boolean,
    *fill: string,
    *fill-opacity: string,
    *fill-rule: ("evenodd" "inherit" "nonzero"),
    *filter: string,
    *height: string,
    *mask: string,
    *opacity: string,
    *pointer-events: ("all" "bounding-box" "color" "fill" "inherit" "none" "painted" "stroke" "visible" "visibleFill" "visiblePainted" "visibleStroke"),
    *requiredExtensions: string,
    *requiredFeatures: string,
    *rx: string,
    *ry: string,
    *shape-rendering: ("auto" "crispEdges" "geometricPrecision" "inherit" "optimizeSpeed"),
    *stroke: string,
    *stroke-dasharray: string,
    *stroke-dashoffset: string,
    *stroke-linecap: ("butt" "inherit" "round" "square"),
    *stroke-linejoin: ("arcs" "bevel" "inherit" "miter" "miter-clip" "round"),
    *stroke-miterlimit: string,
    *stroke-opacity: string,
    *stroke-width: string,
    *style: string,
    *systemLanguage: string,
    *transform: string,
    *visibility: ("collapse" "hidden" "inherit" "visible"),
    *width: string,
    *x: string,
    *y: string,
}
set(class=SVGSetElement ns="http://www.w3.org/2000/svg") {
    +SVG,
    *autofocus: boolean,
    *nodeValue: string,
    *nonce: string,
    *outerHTML: string,
    *scrollLeft: number,
    *scrollTop: number,
    *slot: string,
}
stop(class=SVGStopElement ns="http://www.w3.org/2000/svg") {
    +SVG,
    *class: string,
    *color: string,
    *offset: string,
    *stop-color: string,
    *stop-opacity: string,
    *style: string,
}
svg(class=SVGSVGElement ns="http://www.w3.org/2000/svg") {
    +SVG,
    @afterprint: Event,
    @beforeprint: Event,
    @beforeunload: BeforeUnloadEvent,
    @gamepadconnected: GamepadEvent,
    @gamepaddisconnected: GamepadEvent,
    @hashchange: HashChangeEvent,
    @languagechange: Event,
    @message: MessageEvent,
    @messageerror: MessageEvent,
    @offline: Event,
    @online: Event,
    @pagehide: PageTransitionEvent,
    @pageshow: PageTransitionEvent,
    @popstate: PopStateEvent,
    @rejectionhandled: PromiseRejectionEvent,
    @storage: StorageEvent,
    @unhandledrejection: PromiseRejectionEvent,
    @unload: Event,
    *alignment-baseline: ("after-edge" "alphabetic" "auto" "baseline" "before-edge" "central" "hanging" "ideographic" "inherit" "mathematical" "middle" "text-after-edge" "text-before-edge"),
    *baseProfile: string,
    *baseline-shift: string,
    *class: string,
    *clip: string,
    *clip-path: string,
    *clip-rule: ("evenodd" "inherit" "nonzero"),
    *color: string,
    *color-interpolation: ("auto" "inherit" "linearRGB" "sRGB"),
    *color-interpolation-filters: ("auto" "inherit" "linearRGB" "sRGB"),
    *color-profile: string,
    *color-rendering: ("auto" "inherit" "optimizeQuality" "optimizeSpeed"),
    *contentScriptType: string,
    *contentStyleType: string,
    *cursor: string,
    *direction: ("inherit" "ltr" "rtl"),
    *display: string,
    *dominant-baseline: ("alphabetic" "auto" "central" "hanging" "ideographic" "inherit" "mathematical" "middle" "text-bottom" "text-top"),
    *enable-background: string,
    *externalResourcesRequired: boolean,
    *fill: string,
    *fill-opacity: string,
    *fill-rule: ("evenodd" "inherit" "nonzero"),
    *filter: string,
    *flood-color: string,
    *flood-opacity: string,
    *font-family: string,
    *font-size: string,
    *font-size-adjust: string,
    *font-stretch: string,
    *font-style: ("inherit" "italic" "normal" "oblique"),
    *font-variant: string,
    *font-weight: string,
    *glyph-orientation-horizontal: string,
    *glyph-orientation-vertical: string,
    *height: string,
    *image-rendering: ("auto" "inherit" "optimizeQuality" "optimizeSpeed"),
    *kerning: string,
    *letter-spacing: string,
    *lighting-color: string,
    *marker-end: string,
    *marker-mid: string,
    *marker-start: string,
    *mask: string,
    *opacity: string,
    *overflow: ("auto" "hidden" "inherit" "scroll" "visible"),
    *pointer-events: ("all" "bounding-box" "color" "fill" "inherit" "none" "painted" "stroke" "visible" "visibleFill" "visiblePainted" "visibleStroke"),
    *preserveAspectRatio: ("none" "xMaxYMax" "xMaxYMax meet" "xMaxYMax slice" "xMaxYMid" "xMaxYMid meet" "xMaxYMid slice" "xMaxYMin" "xMaxYMin meet" "xMaxYMin slice" "xMidYMax" "xMidYMax meet" "xMidYMax slice" "xMidYMid" "xMidYMid meet" "xMidYMid slice" "xMidYMin" "xMidYMin meet" "xMidYMin slice" "xMinYMax" "xMinYMax meet" "xMinYMax slice" "xMinYMid" "xMinYMid meet" "xMinYMid slice" "xMinYMin" "xMinYMin meet" "xMinYMin slice"),
    *requiredExtensions: string,
    *requiredFeatures: string,
    *shape-rendering: ("auto" "crispEdges" "geometricPrecision" "inherit" "optimizeSpeed"),
    *stop-color: string,
    *stop-opacity: string,
    *stroke: string,
    *stroke-dasharray: string,
    *stroke-dashoffset: string,
    *stroke-linecap: ("butt" "inherit" "round" "square"),
    *stroke-linejoin: ("arcs" "bevel" "inherit" "miter" "miter-clip" "round"),
    *stroke-miterlimit: string,
    *stroke-opacity: string,
    *stroke-width: string,
    *style: string,
    *systemLanguage: string,
    *text-anchor: ("end" "inherit" "middle" "start"),
    *text-decoration: ("blink" "inherit" "line-through" "none" "overline" "underline"),
    *text-rendering: ("auto" "geometricPrecision" "inherit" "optimizeLegibility" "optimizeSpeed"),
    *unicode-bidi: string,
    *version: string,
    *viewBox: string,
    *visibility: ("collapse" "hidden" "inherit" "visible"),
    *width: string,
    *word-spacing: string,
    *writing-mode: ("inherit" "lr" "lr-tb" "rl" "rl-tb" "tb" "tb-rl"),
    *x: string,
    *xmlns: string,
    *y: string,
    *zoomAndPan: ("disable" "magnify"),
}
switch(class=SVGSwitchElement ns="http://www.w3.org/2000/svg") {
    +SVG,
    *class: string,
    *clip-path: string,
    *color: string,
    *color-interpolation: ("auto" "inherit" "linearRGB" "sRGB"),
    *color-rendering: ("auto" "inherit" "optimizeQuality" "optimizeSpeed"),
    *cursor: string,
    *display: string,
    *enable-background: string,
    *externalResourcesRequired: boolean,
    *fill: string,
    *fill-opacity: string,
    *fill-rule: ("evenodd" "inherit" "nonzero"),
    *filter: string,
    *mask: string,
    *opacity: string,
    *requiredExtensions: string,
    *requiredFeatures: string,
    *shape-rendering: ("auto" "crispEdges" "geometricPrecision" "inherit" "optimizeSpeed"),
    *stroke: string,
    *stroke-dasharray: string,
    *stroke-dashoffset: string,
    *stroke-linecap: ("butt" "inherit" "round" "square"),
    *stroke-linejoin: ("arcs" "bevel" "inherit" "miter" "miter-clip" "round"),
    *stroke-miterlimit: string,
    *stroke-opacity: string,
    *stroke-width: string,
    *style: string,
    *systemLanguage: string,
    *transform: string,
    *visibility: ("collapse" "hidden" "inherit" "visible"),
}
symbol(class=SVGSymbolElement ns="http://www.w3.org/2000/svg") {
    +SVG,
    *class: string,
    *clip: string,
    *clip-path: string,
    *color: string,
    *color-interpolation: ("auto" "inherit" "linearRGB" "sRGB"),
    *color-rendering: ("auto" "inherit" "optimizeQuality" "optimizeSpeed"),
    *cursor: string,
    *enable-background: string,
    *externalResourcesRequired: boolean,
    *fill: string,
    *fill-opacity: string,
    *fill-rule: ("evenodd" "inherit" "nonzero"),
    *filter: string,
    *mask: string,
    *opacity: string,
    *overflow: ("auto" "hidden" "inherit" "scroll" "visible"),
    *preserveAspectRatio: ("none" "xMaxYMax" "xMaxYMax meet" "xMaxYMax slice" "xMaxYMid" "xMaxYMid meet" "xMaxYMid slice" "xMaxYMin" "xMaxYMin meet" "xMaxYMin slice" "xMidYMax" "xMidYMax meet" "xMidYMax slice" "xMidYMid" "xMidYMid meet" "xMidYMid slice" "xMidYMin" "xMidYMin meet" "xMidYMin slice" "xMinYMax" "xMinYMax meet" "xMinYMax slice" "xMinYMid" "xMinYMid meet" "xMinYMid slice" "xMinYMin" "xMinYMin meet" "xMinYMin slice"),
    *shape-rendering: ("auto" "crispEdges" "geometricPrecision" "inherit" "optimizeSpeed"),
    *stroke: string,
    *stroke-dasharray: string,
    *stroke-dashoffset: string,
    *stroke-linecap: ("butt" "inherit" "round" "square"),
    *stroke-linejoin: ("arcs" "bevel" "inherit" "miter" "miter-clip" "round"),
    *stroke-miterlimit: string,
    *stroke-opacity: string,
    *stroke-width: string,
    *style: string,
    *viewBox: string,
}
text(class=SVGTextElement ns="http://www.w3.org/2000/svg") {
    +SVG,
    *class: string,
    *clip-rule: ("evenodd" "inherit" "nonzero"),
    *color: string,
    *color-interpolation: ("auto" "inherit" "linearRGB" "sRGB"),
    *color-rendering: ("auto" "inherit" "optimizeQuality" "optimizeSpeed"),
    *cursor: string,
    *direction: ("inherit" "ltr" "rtl"),
    *display: string,
    *dominant-baseline: ("alphabetic" "auto" "central" "hanging" "ideographic" "inherit" "mathematical" "middle" "text-bottom" "text-top"),
    *dx: string,
    *dy: string,
    *externalResourcesRequired: boolean,
    *fill: string,
    *fill-opacity: string,
    *fill-rule: ("evenodd" "inherit" "nonzero"),
    *filter: string,
    *font-family: string,
    *font-size: string,
    *font-size-adjust: string,
    *font-stretch: string,
    *font-style: ("inherit" "italic" "normal" "oblique"),
    *font-variant: string,
    *font-weight: string,
    *glyph-orientation-horizontal: string,
    *glyph-orientation-vertical: string,
    *kerning: string,
    *lengthAdjust: ("spacing" "spacingAndGlyphs"),
    *letter-spacing: string,
    *mask: string,
    *opacity: string,
    *pointer-events: ("all" "bounding-box" "color" "fill" "inherit" "none" "painted" "stroke" "visible" "visibleFill" "visiblePainted" "visibleStroke"),
    *requiredExtensions: string,
    *requiredFeatures: string,
    *rotate: string,
    *stroke: string,
    *stroke-dasharray: string,
    *stroke-dashoffset: string,
    *stroke-linecap: ("butt" "inherit" "round" "square"),
    *stroke-linejoin: ("arcs" "bevel" "inherit" "miter" "miter-clip" "round"),
    *stroke-miterlimit: string,
    *stroke-opacity: string,
    *stroke-width: string,
    *style: string,
    *systemLanguage: string,
    *text-anchor: ("end" "inherit" "middle" "start"),
    *text-decoration: ("blink" "inherit" "line-through" "none" "overline" "underline"),
    *text-rendering: ("auto" "geometricPrecision" "inherit" "optimizeLegibility" "optimizeSpeed"),
    *textLength: string,
    *transform: string,
    *unicode-bidi: string,
    *visibility: ("collapse" "hidden" "inherit" "visible"),
    *word-spacing: string,
    *writing-mode: ("inherit" "lr" "lr-tb" "rl" "rl-tb" "tb" "tb-rl"),
    *x: string,
    *y: string,
}
textPath(class=SVGTextPathElement ns="http://www.w3.org/2000/svg") {
    +SVG,
    *alignment-baseline: ("after-edge" "alphabetic" "auto" "baseline" "before-edge" "central" "hanging" "ideographic" "inherit" "mathematical" "middle" "text-after-edge" "text-before-edge"),
    *baseline-shift: string,
    *class: string,
    *color: string,
    *direction: ("inherit" "ltr" "rtl"),
    *display: string,
    *dominant-baseline: ("alphabetic" "auto" "central" "hanging" "ideographic" "inherit" "mathematical" "middle" "text-bottom" "text-top"),
    *externalResourcesRequired: boolean,
    *fill: string,
    *fill-opacity: string,
    *fill-rule: ("evenodd" "inherit" "nonzero"),
    *font-family: string,
    *font-size: string,
    *font-size-adjust: string,
    *font-stretch: string,
    *font-style: ("inherit" "italic" "normal" "oblique"),
    *font-variant: string,
    *font-weight: string,
    *glyph-orientation-horizontal: string,
    *glyph-orientation-vertical: string,
    *href: string,
    *kerning: string,
    *letter-spacing: string,
    *method: ("align" "stretch"),
    *requiredExtensions: string,
    *requiredFeatures: string,
    *spacing: ("auto" "exact"),
    *startOffset: string,
    *stroke: string,
    *stroke-dasharray: string,
    *stroke-dashoffset: string,
    *stroke-linecap: ("butt" "inherit" "round" "square"),
    *stroke-linejoin: ("arcs" "bevel" "inherit" "miter" "miter-clip" "round"),
    *stroke-miterlimit: string,
    *stroke-opacity: string,
    *stroke-width: string,
    *style: string,
    *systemLanguage: string,
    *text-anchor: ("end" "inherit" "middle" "start"),
    *text-decoration: ("blink" "inherit" "line-through" "none" "overline" "underline"),
    *unicode-bidi: string,
    *visibility: ("collapse" "hidden" "inherit" "visible"),
    *word-spacing: string,
}
tspan(class=SVGTSpanElement ns="http://www.w3.org/2000/svg") {
    +SVG,
    *alignment-baseline: ("after-edge" "alphabetic" "auto" "baseline" "before-edge" "central" "hanging" "ideographic" "inherit" "mathematical" "middle" "text-after-edge" "text-before-edge"),
    *baseline-shift: string,
    *class: string,
    *color: string,
    *direction: ("inherit" "ltr" "rtl"),
    *display: string,
    *dominant-baseline: ("alphabetic" "auto" "central" "hanging" "ideographic" "inherit" "mathematical" "middle" "text-bottom" "text-top"),
    *dx: string,
    *dy: string,
    *externalResourcesRequired: boolean,
    *fill: string,
    *fill-opacity: string,
    *fill-rule: ("evenodd" "inherit" "nonzero"),
    *font-family: string,
    *font-size: string,
    *font-size-adjust: string,
    *font-stretch: string,
    *font-style: ("inherit" "italic" "normal" "oblique"),
    *font-variant: string,
    *font-weight: string,
    *glyph-orientation-horizontal: string,
    *glyph-orientation-vertical: string,
    *kerning: string,
    *lengthAdjust: ("spacing" "spacingAndGlyphs"),
    *letter-spacing: string,
    *requiredExtensions: string,
    *requiredFeatures: string,
    *rotate: string,
    *stroke: string,
    *stroke-dasharray: string,
    *stroke-dashoffset: string,
    *stroke-linecap: ("butt" "inherit" "round" "square"),
    *stroke-linejoin: ("arcs" "bevel" "inherit" "miter" "miter-clip" "round"),
    *stroke-miterlimit: string,
    *stroke-opacity: string,
    *stroke-width: string,
    *style: string,
    *systemLanguage: string,
    *text-anchor: ("end" "inherit" "middle" "start"),
    *text-decoration: ("blink" "inherit" "line-through" "none" "overline" "underline"),
    *textLength: string,
    *unicode-bidi: string,
    *visibility: ("collapse" "hidden" "inherit" "visible"),
    *word-spacing: string,
    *x: string,
    *y: string,
}
use(class=SVGUseElement ns="http://www.w3.org/2000/svg") {
    +SVG,
    *class: string,
    *clip-rule: ("evenodd" "inherit" "nonzero"),
    *color-interpolation: ("auto" "inherit" "linearRGB" "sRGB"),
    *color-rendering: ("auto" "inherit" "optimizeQuality" "optimizeSpeed"),
    *cursor: string,
    *display: string,
    *externalResourcesRequired: boolean,
    *filter: string,
    *height: string,
    *href: string,
    *mask: string,
    *opacity: string,
    *pointer-events: ("all" "bounding-box" "color" "fill" "inherit" "none" "painted" "stroke" "visible" "visibleFill" "visiblePainted" "visibleStroke"),
    *requiredExtensions: string,
    *requiredFeatures: string,
    *style: string,
    *systemLanguage: string,
    *transform: string,
    *visibility: ("collapse" "hidden" "inherit" "visible"),
    *width: string,
    *x: string,
    *y: string,
}
view(class=SVGViewElement ns="http://www.w3.org/2000/svg") {
    +SVG,
    *externalResourcesRequired: boolean,
    *preserveAspectRatio: ("none" "xMaxYMax" "xMaxYMax meet" "xMaxYMax slice" "xMaxYMid" "xMaxYMid meet" "xMaxYMid slice" "xMaxYMin" "xMaxYMin meet" "xMaxYMin slice" "xMidYMax" "xMidYMax meet" "xMidYMax slice" "xMidYMid" "xMidYMid meet" "xMidYMid slice" "xMidYMin" "xMidYMin meet" "xMidYMin slice" "xMinYMax" "xMinYMax meet" "xMinYMax slice" "xMinYMid" "xMinYMid meet" "xMinYMid slice" "xMinYMin" "xMinYMin meet" "xMinYMin slice"),
    *viewBox: string,
    *viewTarget: string,
    *zoomAndPan: ("disable" "magnify"),
}
